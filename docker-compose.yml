# This configuration file is for the **development** setup.
# For a production example please refer to getredash/setup repository on GitHub.
version: "2.2"
x-redash-service: &redash-service
  build:
    context: .
    args:
      skip_frontend_build: "true"
  volumes:
    - .:/app
  env_file:
    - .env
x-redash-environment: &redash-environment
  REDASH_LOG_LEVEL: "DEBUG"
  REDASH_REDIS_URL: "redis://redis:6379/0"
  REDASH_DATABASE_URL: "postgresql://postgres@postgres/postgres"
  REDASH_RATELIMIT_ENABLED: "false"
#  REDASH_MAIL_DEFAULT_SENDER: "redash@example.com"
  REDASH_MAIL_SERVER: "email"
  REDASH_ENFORCE_CSRF: "true"
  # Set secret keys in the .env file
services:
  # docker-compose stop server && docker-compose run --rm --service-ports server debug_server && docker-compose start server
  server:
    <<: *redash-service
    command: dev_server
    depends_on:
      - postgres
      - redis
    ports:
      - "5000:5000"
      - "5678:5678"
    environment:
      <<: *redash-environment
      PYTHONUNBUFFERED: 0
  scheduler:
    <<: *redash-service
    command: dev_scheduler
    depends_on:
      - server
    environment:
      <<: *redash-environment
  # docker-compose stop worker && docker-compose run --rm --service-ports worker debug_worker && docker-compose start worker      
  worker:
    <<: *redash-service
    command: dev_worker
    depends_on:
      - server
    ports:
      - "5679:5678"      
    environment:
      <<: *redash-environment
      PYTHONUNBUFFERED: 0
  redis:
    image: redis:3-alpine
    restart: unless-stopped
    ports:
      - "6379:6379"
  postgres:
    image: postgres:9.5-alpine
    # The following turns the DB into less durable, but gains significant performance improvements for the tests run (x3
    # improvement on my personal machine). We should consider moving this into a dedicated Docker Compose configuration for
    # tests.
    ports:
      - "15432:5432"
    command: "postgres -c fsync=off -c full_page_writes=off -c synchronous_commit=OFF"
    restart: unless-stopped
    environment:
      POSTGRES_HOST_AUTH_METHOD: "trust"
    volumes:
      - ./docker-data/postgres/data:/var/lib/postgresql/data
  email:
    image: djfarrelly/maildev
    ports:
      - "1080:80"
    restart: unless-stopped
  # dynamodb-gui:
  #   image: "jpspringall/dynamodb-gui"
  #   ports:
  #     - "8001:8001"
  #   environment:
  #     DYNAMO_ENDPOINT: "http://datasource-dynamodb-local:8000"
  datasource-dynamodb-local:
    image: "amazon/dynamodb-local:latest"
    command: "-jar DynamoDBLocal.jar"
    ports:
      - "8000:8000"
    working_dir: /home/dynamodblocal
  datasource-postgres-16:
    image: postgres:16-bookworm
    networks:
      default:
        aliases:
          - datasource-postgres-1
          - datasource-postgres-2
    environment:
     - POSTGRES_USER=administrator
     - POSTGRES_PASSWORD=P@ssw0rd
    ports:
     - "5432:5432"
    volumes:
      - ./docker-data/datasource-postgres-16/data:/var/lib/postgresql/data